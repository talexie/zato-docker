 
- name: Update and upgrade apt packages (02)
  apt:
    upgrade: yes
    update_cache: true
    cache_valid_time: 3600

- name: Install NodeJS (for testing) (02)
  when: zato_run_internal_tests or zato_install_playwright
  shell: |
    curl -sL https://deb.nodesource.com/setup_16.x | bash -
    apt-get install nodejs -y

- name: Install Playwright (for testing) (02)
  when: zato_install_playwright
  become: true
  become_user: "vagrant"
  shell: |
    npm i -D @playwright/test &&
    NODE_TLS_REJECT_UNAUTHORIZED="0" npx playwright install &&
    pip install playwright &&
    echo "export PATH=$PATH:~/.local/bin" >> ~/.bashrc

- name: Install Geany (for Playwright) (02)
  when: zato_install_playwright
  shell: |
    apt-get install geany -y

- name: Clean up extra installation artifacts (02)
  shell: |
    rm -rf /var/crash/*

- name: Make sure that PostgreSQL is started (02)
  when: zato_use_postgresql
  shell: |
    DEBIAN_FRONTEND=noninteractive service postgresql restart

- name: Make sure that MySQL is started (02)
  when: zato_use_mysql
  shell: |
    DEBIAN_FRONTEND=noninteractive service mysql restart

- name: Make sure that Redis is started (02)
  shell: |
    DEBIAN_FRONTEND=noninteractive service redis-server restart

- name: Regenerate host SSH keys (02)
  shell: |
    rm -v /etc/ssh/ssh_host_*
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure openssh-server

- name: Restart the SSH server after regenerating its keys (02)
  shell: |
    DEBIAN_FRONTEND=noninteractive service ssh restart

# - name: Drop the SQL database if it exists (PG -> main) (02)
#  when: zato_use_postgresql
#  become: true
#  become_user: "postgres"
#  community.postgresql.postgresql_db:
#    db: "{{ zato_db_main }}"
#    login_host: "{{ zato_db_host }}"
#    login_user: "{{ zato_db_username_main }}"
#    login_password: "{{ zato_db_password_main }}"
#    state: absent
#    force: "yes"
#    name: "{{ zato_db_main }}"

- name: Drop the SQL database if it exists (MySQL -> main) (02)
  when: zato_use_mysql
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: absent
    force: "yes"
    name: "{{ zato_db_main }}"

# - name: Drop the SQL database if it exists (PG -> pub/sub) (02)
#  when: zato_use_postgresql
#  become: true
#  become_user: "postgres"
#  community.postgresql.postgresql_db:
#    db: "{{ zato_db_main }}"
#    login_host: "{{ zato_db_host }}"
#    login_user: "{{ zato_db_username_main }}"
#    login_password: "{{ zato_db_password_main }}"
#    state: absent
#    force: "yes"
#    name: "{{ zato_db_pubsub }}"

- name: Drop the SQL database if it exists (MySQL -> pub/sub) (02)
  when: zato_use_mysql
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: absent
    force: "yes"
    name: "{{ zato_db_pubsub }}"

- name: Create the SQL database (PG -> main) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_db:
    login_host: "{{ zato_db_host }}"
    login_user: "{{ zato_db_username_main }}"
    login_password: "{{ zato_db_password_main }}"
    state: present
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    name: "{{ zato_db_main }}"

- name: Create the SQL database (MySQL -> main) (02)
  when: zato_use_mysql
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    force: "yes"
    name: "{{ zato_db_main }}"

- name: Create the SQL database (PG -> pub/sub) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_db:
    login_host: "{{ zato_db_host }}"
    login_user: "{{ zato_db_username_main }}"
    login_password: "{{ zato_db_password_main }}"
    state: present
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    name: "{{ zato_db_pubsub }}"

- name: Create the SQL database (MySQL -> pub/sub) (02)
  when: zato_use_mysql
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    force: "yes"
    name: "{{ zato_db_pubsub }}"

# - name: Drop the SQL user if it exists (PG -> main) (02)
#  when: zato_use_postgresql
#  become: true
#  become_user: "postgres"
#  community.postgresql.postgresql_user:
#    db: "{{ zato_db_main }}"
#    login_host: "{{ zato_db_host }}"
#    login_user: "{{ zato_db_username_main }}"
#    login_password: "{{ zato_db_password_main }}"
#    state: absent
#    fail_on_user: "no"
#    name: "zato_{{ zato_db_username_main }}"

- name: Drop the SQL user if it exists (MySQL -> main) (02)
  when: zato_use_mysql
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: absent
    name: "{{ zato_db_username_main }}"

# - name: Drop the SQL user if it exists (PG -> pub/sub) (02)
#  when: zato_use_postgresql
#  become: true
#  become_user: "postgres"
#  community.postgresql.postgresql_user:
#    db: "{{ zato_db_pubsub }}"
#    login_host: "{{ zato_db_host }}"
#    login_user: "{{ zato_db_username_main }}"
#    login_password: "{{ zato_db_password_main }}"
#    state: absent
#    fail_on_user: "no"
#    name: "zato_pub_{{ zato_db_username_pubsub }}"

- name: Drop the SQL user if it exists (MySQL -> pub/sub) (02)
  when: zato_use_mysql
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: absent
    name: "{{ zato_db_username_pubsub }}"

- name: Create the SQL user (PG -> main) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_user:
    state: present
    db: "{{ zato_db_main }}"
    login_host: "{{ zato_db_host }}"
    login_user: "{{ zato_db_username_main }}"
    login_password: "{{ zato_db_password_main }}"
    name: "zato_{{ zato_db_username_main }}"
    password: "{{ zato_db_password_main }}"
    encrypted: "yes"
    priv: "ALL"
    comment: "Main Zato user for PostgreSQL"

- name: Create the SQL user (MySQL -> main) (02)
  when: zato_use_mysql
  community.mysql.mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    name: "{{ zato_db_username_main }}"
    password: "{{ zato_db_password_main }}"
    priv: '*.*:ALL,GRANT'

- name: Create the SQL user (PG -> pub/sub) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_user:
    state: present
    db: "{{ zato_db_pubsub }}"
    login_host: "{{ zato_db_host }}"
    login_user: "{{ zato_db_username_main }}"
    login_password: "{{ zato_db_password_main }}"
    name: "zato_pub_{{ zato_db_username_pubsub }}"
    password: "{{ zato_db_password_pubsub }}"
    encrypted: "yes"
    priv: "ALL"
    comment: "Zato publish/subscribe user for PostgreSQL"

- name: Create the SQL user (MySQL -> pub/sub) (02)
  when: zato_use_mysql
  community.mysql.mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    name: "{{ zato_db_username_pubsub }}"
    password: "{{ zato_db_password_pubsub }}"
    priv: '*.*:ALL,GRANT'

- name: Grant access to the SQL user (PG -> main) (02)
  when: zato_use_postgresql
  community.postgresql.postgresql_pg_hba:
    create: "yes"
    dest: "{{ pg_hba_conf_path }}"
    contype: host
    users: "{{ zato_db_username_main }}"
    source: all
    databases: "{{ zato_db_main }}, postgres"
    method: md5

- name: Grant access to the SQL user (PG -> pub/sub) (02)
  when: zato_use_postgresql
  community.postgresql.postgresql_pg_hba:
    create: "yes"
    dest: "{{ pg_hba_conf_path }}"
    contype: host
    users: "{{ zato_db_username_pubsub }}"
    source: all
    databases: "{{ zato_db_pubsub }}, postgres"
    method: md5

- name: Configure PostgreSQL to listen on all interfaces (02)
  when: zato_use_postgresql
  replace:
    path: "{{ pg_conf_path }}"
    regexp: "#listen_addresses = 'localhost'"
    replace: "listen_addresses = '*'"

- name: Enable password-based SSH connections (02)
  replace:
    path: "/etc/ssh/sshd_config"
    regexp: "PasswordAuthentication no"
    replace: "PasswordAuthentication yes"

- name: Allow for SSH connections to be established from anywhere (02)
  replace:
    path: "/etc/ssh/sshd_config"
    regexp: "#ListenAddress 0.0.0.0"
    replace: "ListenAddress 0.0.0.0"

- name: Restart PostgreSQL after its configuration was changed (02)
  when: zato_use_postgresql
  shell: |
    DEBIAN_FRONTEND=noninteractive service postgresql restart

- name: Restart MySQL after its configuration was changed (02)
  when: zato_use_mysql
  shell: |
    DEBIAN_FRONTEND=noninteractive service mysql restart

- name: Restart the SSH server after its configuration was changed (02)
  shell: |
    DEBIAN_FRONTEND=noninteractive service ssh restart

- name: Set the SSH password for user 'zato' (02)
  user:
    name: zato
    password: "{{ zato_ssh_user_password | password_hash('sha512') }}"

- name: Install HashiCorp Vault (02)
  when: zato_use_hashicorp_vault
  become: true
  become_user: "root"
  shell: |
    curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
    apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    apt-get update && apt-get install vault

- name: Make sure all the previous processes started by user zato are stopped (02)
  shell: |
    pkill --signal 9 -u zato || true

- name: Start HashiCorp Vault (dev) (02)
  when: zato_use_hashicorp_vault
  become: true
  become_user: "zato"
  shell: |
    /usr/bin/vault server -dev -dev-root-token-id={{ zato_hashicorp_vault_token }}
  async: "{{ zato_async_timeout }}"
  poll: 0

- name: Make sure any previous environment is deleted (02)
  shell: |
    rm -rf {{ zato_env_path }}

- name: Create a quickstart environment (02)
  when: zato_quickstart_disabled == False
  become: true
  become_user: "zato"
  shell: |
    cd /zato_patches
    cp -r --parents * /opt/zato/{{ zato_version }}.0/code
    PATH=$PATH:~/current/bin &&
    {{ zato_env_path }}/zato-qs-stop.sh || true &&
    zato quickstart \
        {{ zato_env_path }} \
        --odb-type {{ zato_db_type }} \
        --odb-host {{ zato_db_host }} \
        --odb-port {{ zato_db_port }} \
        --odb-db-name {{ zato_db_main }} \
        --odb-user {{ zato_db_username_main }} \
        --odb-password '{{ zato_db_password_main }}' \
        --cluster-name '{{ zato_cluster_name }}' \
        --skip-if-exists \
        --secret-key {{ zato_secret_key }} \
        --jwt-secret {{ zato_jwt_secret }} \
        --servers {{ zato_server_num }} \
        --verbose

- name: Check if ODB cluster table exists (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_script:
    db: "{{ zato_db_main }}"
    login_host: "{{ zato_db_host }}"
    login_user: "{{ zato_db_username_main }}"
    login_password: "{{ zato_db_password_main }}"
    path: "/var/lib/postgresql/scripts/test_odb_tables.sql"
  register: cluster_table_exists

- name: Create ODB if it is a new environment (02)
  when: cluster_table_exists.rowcount < 1 and zato_quickstart_disabled == True
  become: true
  become_user: "zato"
  shell: |
    PATH=$PATH:~/current/bin &&
    zato create odb \
        --odb-type {{ zato_db_type }} \
        --odb-host {{ zato_db_host }} \
        --odb-port {{ zato_db_port }} \
        --odb-db-name {{ zato_db_main }} \
        --odb-user {{ zato_db_username_main }} \
        --odb-password '{{ zato_db_password_main }}' \
        --verbose

- name: Check if ODB cluster exists (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_script:
    db: "{{ zato_db_main }}"
    login_host: "{{ zato_db_host }}"
    login_user: "{{ zato_db_username_main }}"
    login_password: "{{ zato_db_password_main }}"
    path: "/var/lib/postgresql/scripts/test_odb_cluster.sql"
    named_args:
      cluster_name: "{{ zato_cluster_name }}"
  register: cluster_exists

- name: Existing ODB cluster
  ansible.builtin.debug:
    msg: "ODB cluster found : {{ cluster_exists.rowcount }}"

- name: Create ODB Cluster (02)
  when: cluster_exists.rowcount == 0 and zato_quickstart_disabled == True
  become: true
  become_user: "zato"
  shell: |
    PATH=$PATH:~/current/bin &&
    zato create cluster \
        --odb-type {{ zato_db_type }} \
        --odb-host {{ zato_db_host }} \
        --odb-port {{ zato_db_port }} \
        --odb-db-name {{ zato_db_main }} \
        --odb-user {{ zato_db_username_main }} \
        --odb-password '{{ zato_db_password_main }}' \
        --lb-host {{ zato_lb_host }} \
        --lb-port {{ zato_lb_port }} \
        --lb-agent_port {{ zato_lb_agent_port }} \
        --secret-key {{ zato_secret_key }} \
        --admin-invoke-password {{ zato_dashboard_admin_password }} \
        --verbose \
        {{ zato_cluster_name }}

- name: Check if Server exists in cluster and remove server (02)
  when: zato_quickstart_disabled == True
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_script:
    db: "{{ zato_db_main }}"
    login_host: "{{ zato_db_host }}"
    login_user: "{{ zato_db_username_main }}"
    login_password: "{{ zato_db_password_main }}"
    path: "/var/lib/postgresql/scripts/test_server_cluster.sql"
    named_args:
      cluster_name: "{{ zato_cluster_name }}"

- name: Create Web Admin/Dashboard (02)
  when: zato_quickstart_disabled == True
  become: true
  become_user: "zato"
  shell: |
    cd /zato_patches
    cp -r --parents * /opt/zato/{{ zato_version }}.0/code
    cp /opt/settings.py /opt/zato/current/zato-web-admin/src/zato/admin
    PATH=$PATH:~/current/bin &&
    zato create web-admin \
        {{ zato_env_path }}/web-admin/ \
        --odb-type {{ zato_db_type }} \
        --odb-host {{ zato_db_host }} \
        --odb-port {{ zato_db_port }} \
        --odb-db-name {{ zato_db_main }} \
        --odb-user {{ zato_db_username_main }} \
        --odb-password '{{ zato_db_password_main }}' \
        --verbose \
        --admin-invoke-password {{ zato_dashboard_admin_password }}

- name: Create Load Balancer (02)
  when: zato_quickstart_disabled == True
  become: true
  become_user: "zato"
  shell: |
    PATH=$PATH:~/current/bin &&
    zato create load-balancer \
        --verbose \
        {{ zato_env_path }}/load-balancer/

- name: Create Server (02)
  when: zato_quickstart_disabled == True
  become: true
  become_user: "zato"
  shell: |
    PATH=$PATH:~/current/bin &&
    zato create server \
        {{ zato_env_path }}/"{{ 'server%s' | format(item) }}"/ \
        {{ zato_cluster_name }} \
        "{{ 'server%s' | format(item) }}" \
        --odb-type {{ zato_db_type }} \
        --odb-host {{ zato_db_host }} \
        --odb-port {{ zato_db_port }} \
        --odb-db-name {{ zato_db_main }} \
        --odb-user {{ zato_db_username_main }} \
        --odb-password '{{ zato_db_password_main }}' \
        --verbose \
        --http-port {{ zato_server_port|int + item|int -1 }} \
        --scheduler-host {{ zato_scheduler_host }} \
        --scheduler-port {{ zato_scheduler_port }} \
        --secret-key {{ zato_secret_key }} \
        --jwt-secret {{ zato_jwt_secret }}
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}"        

- name: Create Scheduler (02)
  when: zato_quickstart_disabled == True
  become: true
  become_user: "zato"
  shell: |
    PATH=$PATH:~/current/bin &&
    zato create scheduler \
        {{ zato_env_path }}/scheduler/ \
        --odb-type {{ zato_db_type }} \
        --odb-host {{ zato_db_host }} \
        --odb-port {{ zato_db_port }} \
        --odb-db-name {{ zato_db_main }} \
        --odb-user {{ zato_db_username_main }} \
        --odb-password '{{ zato_db_password_main }}' \
        --verbose \
        --cluster-name {{ zato_cluster_name }} \
        --secret-key {{ zato_secret_key }} \
        --server-host {{ zato_server_host }} \
        --server-port {{ zato_server_port }} \
        --initial-sleep-time 30     

- name: Enable Redis (02)
  when: zato_enable_redis
  become: true
  become_user: "zato"
  replace:
    path: "{{ zato_env_path }}/{{ 'server%s' | format(item) }}/config/repo/server.conf"
    regexp: "^host=$"
    replace: "host=localhost"
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}"   

- name: Enable internal services (if testing) (02)
  when: zato_run_internal_tests
  become: true
  become_user: "zato"
  replace:
    path: "{{ zato_env_path }}/{{ 'server%s' | format(item) }}/config/repo/server.conf"
    regexp: "service_invoker_allow_internal="
    replace: "service_invoker_allow_internal=/zato/api/invoke/{service_name}"
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}"   

- name: Enable SSO (if testing) (02)
  when: zato_run_internal_tests
  become: true
  become_user: "zato"
  replace:
    path: "{{ zato_env_path }}/{{ 'server%s' | format(item) }}/config/repo/server.conf"
    regexp: "sso=False"
    replace: "sso=True"
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}"   

- name: Prepare the work directory for configuration details (02)
  shell: |
    mkdir -p /opt/zato/env/details
    chown -R zato:zato /opt/zato/env/details

- name: Store the environment's details in JSON (02)
  become: true
  become_user: "zato"
  copy:
    content: |
      {{ environment_config | to_nice_json }}
    dest: ~/env/details/all-zato-env-details.json

- name: Save Secret Key (02)
  local_action: copy content="{{ zato_secret_key }}" dest={{ zato_secret_key_file }}

- name: Save JWT Secret (02)
  local_action: copy content="{{ zato_jwt_secret }}" dest={{ zato_jwt_secret_file }}

- name: Save SSH credentials (02)
  local_action: copy content="{{ zato_ssh_user_password }}" dest={{ zato_ssh_user_password_file }}

- name: Save Dashboard credentials (02)
  local_action: copy content="{{ zato_dashboard_admin_password }}" dest={{ zato_dashboard_admin_password_file }}

- name: Save IDE credentials
  local_action: copy content="{{ zato_ide_publisher_password }}" dest={{ zato_ide_publisher_password_file }}

- name: Save database user's credentials (main) (02)
  local_action: copy content="{{ zato_db_password_main }}" dest={{ zato_db_password_main_file }}

- name: Save database user's credentials (pub/sub) (02)
  local_action: copy content="{{ zato_db_password_pubsub }}" dest={{ zato_db_password_pubsub_file }}

- name: Create symlinks for backward compatibility (02)
  become: true
  become_user: "zato"
  shell: |
    ln -sfv {{ zato_ssh_user_password_file }} ~/zato_user_password
    ln -sfv {{ zato_dashboard_admin_password_file }} ~/web_admin_password
    ln -sfv {{ zato_ide_publisher_password_file }} ~/zato_ide_publisher_password

- name: Copy SSH material (02)
  when: zato_map_ssh_dir
  become: true
  become_user: "root"
  shell: |
    rm -rf /opt/zato/.ssh
    cp -r /tmp/zato-host-ssh-dir/ /opt/zato/.ssh
    chown -R zato:zato /opt/zato/.ssh/
    chmod 400 /opt/zato/.ssh/*
    chmod 700 /opt/zato/.ssh

- name: Ensure scripts exist (zato) (02)
  become: true
  become_user: "zato"
  shell: |
    echo "" >> ~/.bashrc_zato

- name: Set Bash defaults (zato) (02)
  become: true
  become_user: "zato"
  shell: |
    echo ":set tabstop=4" >> ~/.vimrc
    echo ":set shiftwidth=4" >> ~/.vimrc
    echo ":set expandtab" >> ~/.vimrc
    echo ":set noincsearch" >> ~/.vimrc
    echo "export PATH=$PATH:~/current/bin" >> ~/.bashrc
    echo "source /usr/share/mc/bin/mc.sh" >> ~/.bashrc
    echo 'SELECTED_EDITOR="/usr/bin/vim.basic"' >> ~/.selected-editor

    echo "export PYTHONPATH=$PYTHONPATH:/opt/zato/current/extlib" >> ~/.bashrc
    echo "export ZATO_HOT_DEPLOY_DIR=/opt/hot-deploy/services" >> ~/.bashrc
    echo "export ZATO_USER_CONF_DIR=/opt/hot-deploy/user-conf:/tmp/zato-user-conf" >> ~/.bashrc
    echo "export ZATO_HOT_DEPLOY_PREFER_SNAPSHOTS={{ zato_hot_deploy_prefer_snapshots }}" >> ~/.bashrc

    echo "source ~/.bashrc_zato" >> ~/.bashrc

- name: Set Bash defaults (root) (02)
  become: true
  become_user: "root"
  shell: |
    echo ":set tabstop=4" >> ~/.vimrc
    echo ":set shiftwidth=4" >> ~/.vimrc
    echo ":set expandtab" >> ~/.vimrc
    echo ":set noincsearch" >> ~/.vimrc
    echo "source /usr/share/mc/bin/mc.sh" >> ~/.bashrc
    echo "sudo su - zato" >> ~/.bash_history
    echo 'SELECTED_EDITOR="/usr/bin/vim.basic"' >> ~/.selected-editor

- name: Set Bash defaults (root-level user) (02)
  when: zato_root_level_user
  become: true
  become_user: "root"
  shell: |
    echo ":set tabstop=4" >> ~{{ zato_root_level_user }}/.vimrc
    echo ":set shiftwidth=4" >> ~{{ zato_root_level_user }}/.vimrc
    echo ":set expandtab" >> ~{{ zato_root_level_user }}/.vimrc
    echo ":set noincsearch" >> ~{{ zato_root_level_user }}/.vimrc
    echo "source /usr/share/mc/bin/mc.sh" >> ~{{ zato_root_level_user }}/.bashrc
    echo "sudo su - zato" >> ~{{ zato_root_level_user }}/.bash_history
    echo 'SELECTED_EDITOR="/usr/bin/vim.basic"' >> ~{{ zato_root_level_user }}/.selected-editor

- name: Prepare default hot-deployment directories (02)
  become: true
  become_user: "root"
  shell: |
    mkdir -p /opt/hot-deploy/python-reqs
    mkdir -p /opt/hot-deploy/services
    mkdir -p /opt/hot-deploy/user-conf
    mkdir -p /opt/hot-deploy/enmasse
    chown -R zato:zato /opt/hot-deploy

- name: Prepare per-server-component startup scripts (02)
  become: true
  become_user: "root"
  shell: |
    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-{{ 'server%s' | format(item) }}-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/{{ 'server%s' | format(item) }} --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-{{ 'server%s' | format(item) }}-fg.sh
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}"
  
- name: Prepare per-component startup scripts (02)
  become: true
  become_user: "root"
  shell: |
    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-web-admin-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/web-admin --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-web-admin-fg.sh

    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-load-balancer-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/load-balancer --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-load-balancer-fg.sh

    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-scheduler-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/scheduler --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-scheduler-fg.sh

    chown zato:zato {{ zato_env_path }}/start-*.sh
    chmod 764 {{ zato_env_path }}/start-*.sh

- name: Set extlib structure (02)
  when: zato_ext_lib_dir
  shell: |
    chown -R zato:zato /opt/zato
    rm -rf /opt/zato/current/extlib
    ln -s /tmp/zato-extlib /opt/zato/current/extlib

- name: Set filesystem permissions (02)
  when: zato_ext_lib_dir
  shell: |
    chown -R zato:zato /opt/zato

- name: Add servers to load-balancer
  become: true
  become_user: "zato"
  replace:
    path: "{{ zato_env_path }}/load-balancer/config/repo/zato.config"
    regexp: 'ZATO begin backend bck_http_plain'
    replace: |-
      ZATO begin backend bck_http_plain
        server http_plain--{{ 'server%s' | format(item) }} {{ zato_server_host }}:{{ zato_server_port|int + item|int -1 }} check inter 2s rise 2 fall 2 # ZATO backend bck_http_plain:server--{{ 'server%s' | format(item) }}
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}" 

- name: Start the quickstart environment (server) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-{{ 'server%s' | format(item) }}-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}" 

- name: Start the quickstart environment (dashboard) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-web-admin-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0

- name: Start the quickstart environment (load balancer) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-load-balancer-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0

- name: Start the quickstart environment (scheduler) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-scheduler-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0

#- name: Waiting for the environment to start (02)
#  become: true
#  become_user: "zato"
#  shell: |
#    ~/current/bin/zato wait --path {{ zato_env_path }}/server1 --timeout {{ zato_server_wait }} --silent

- name: Check that the server started (02)
  uri:
    url: http://{{ zato_server_host }}:{{ 17010 + item|int }}/zato/ping
  register: _server_result
  until: _server_result.status == 200
  retries: 480 
  delay: 20 
  loop: "{{ range(0,zato_server_num|int,1)|list }}" 

- name: Check that the load-balancer started (02)
  uri:
    url: http://{{ zato_lb_host }}:11223/zato/ping
  register: _result
  until: _result.status == 200
  retries: 480 
  delay: 20

- name: Set Dashboard password (02)
  become: true
  become_user: "zato"
  shell: |
    ~/current/bin/zato update password {{ zato_env_path }}/web-admin admin --password {{ zato_dashboard_admin_password }} --verbose

- name: Set IDE password (02)
  become: true
  become_user: "zato"
  shell: |
    ~/current/bin/zato set-ide-password {{ zato_env_path }}/{{ 'server%s' | format(item) }} --password {{ zato_ide_publisher_password }} --verbose
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}" 

- name: Make sure the directory for config files exists (02)
  become: true
  become_user: "zato"
  shell: |
    mkdir -p /tmp/zato-user-conf/

- name: Make sure config files are owned by user zato (02)
  shell: |
    chown -R zato:zato /opt/hot-deploy/user-conf/
    chown -R zato:zato /tmp/zato-user-conf/

- name: Make sure config files are deployed (02)
  become: true
  become_user: "zato"
  shell: |
    touch -c /opt/hot-deploy/user-conf/*
    touch -c /tmp/zato-user-conf/*

- name: Make sure additional packages are deployed if they are missed (02)
  become: true
  become_user: "zato"
  shell: |
    touch -c /opt/hot-deploy/python-reqs/*
    touch -c /tmp/zato-user-reqs/*
    ~/current/bin/pip install --upgrade -r /opt/hot-deploy/python-reqs/requirements.txt


- name: Run the pre-enmasse script (02)
  when: zato_pre_enmasse_script
  shell: |
    /usr/bin/bash /tmp/zato-pre-enmasse-script.sh

- name: Run enmasse -> /opt (02)
  become: true
  become_user: "zato"
  shell: |
    ~/current/bin/zato enmasse {{ zato_env_path }}/{{ 'server%s' | format(item) }} --import --input /opt/hot-deploy/enmasse/enmasse.yaml --env-file /opt/hot-deploy/enmasse/env.ini --replace-odb-objects --exit-on-missing-file --verbose
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}"

- name: Run enmasse -> /tmp (02)
  become: true
  become_user: "zato"
  shell: |
    ~/current/bin/zato enmasse {{ zato_env_path }}/{{ 'server%s' | format(item) }} --import --input /tmp/enmasse.yaml --env-file /tmp/env.ini --replace-odb-objects --exit-on-missing-file --verbose
  loop: "{{ range(1,zato_server_num|int +1,1)|list }}"

- name: Run the post-install script (02)
  when: zato_post_install_script
  become: true
  become_user: "zato"
  shell: |
    /usr/bin/bash /tmp/zato-post-install-script.sh

- name: Run internal tests (it may take 10+ minutes) (02)
  when: zato_run_internal_tests
  become: true
  become_user: "zato"
  shell: |
    export PATH=$PATH:~/current/bin
    cd {{ zato_tests_base_dir }}
    make run-tests

- name: Get Interoperability Services
  become: true
  become_user: "zato"
  ansible.builtin.git:
    repo: https://github.com/nataaha/his_interoperability.git
    dest: /opt/his_interoperability
    single_branch: yes
    version: master

- name: Copy the Interoperability services
  become: true
  become_user: "zato"
  shell: |
    cp /opt/his_interoperability/*.py /opt/hot-deploy/services